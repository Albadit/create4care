@page "/measuring"
@using Microsoft.Maui.Storage
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject BluetoothService BluetoothService
@inject NavigationManager NavigationManager

<NavMenu Name="Measuring" />

<main>
    <!-- <h1>Pose Measuring</h1> -->

    <span id="loading" class="center" hidden>Loading camera...</span>
    <span id="error" class="center error" hidden></span>

    <div id="container">
        <span id="notification" class="center" hidden></span>
        <video id="videoInput" muted autoplay playsinline></video>
        <canvas id="output"></canvas>
        <button id="snapshotButton" class="btn" hidden disabled="@(!BluetoothService.IsConnected)">Take Picture</button>
    </div>
    <div id="issuePopup" class="modal" hidden>
        <div class="modal-content">
            <h2>Issues Detected</h2>
            <ul id="issueList"></ul>
            <button id="retryButton" class="btn">Retry</button>
        </div>
    </div>

    @* <div class="bluetooth-status" style="padding:1rem; border-top:1px solid #ccc;">
        <p>BLE Status: @BluetoothService.IsConnected</p>
        <p>Last Data: @_btPayloadJson</p>
        <p>current Data: @_savedBtPayload</p>
    </div> *@

    <div id="issuePopup" class="modal" hidden="@(BluetoothService.IsConnected)">
        <div class="modal-content">
            <h2>Please connect the device</h2>
            <button class="btn" @onclick="GoToBluetooth">Connect here</button>
        </div>
    </div>
</main>

@code {
    private DotNetObjectReference<Measuring>? _dotNetRef;
    private bool _cameraInitialized = false;
    private string _btPayloadJson = "(none)";
    private string _savedBtPayload = "(none)";

    protected override void OnInitialized()
    {
        BluetoothService.OnDataReceived += data => {
            _btPayloadJson = data;
            InvokeAsync(StateHasChanged);
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {   
            if (BluetoothService.IsConnected) {
                _dotNetRef = DotNetObjectReference.Create(this);
                await JS.InvokeVoidAsync("initializeCamera", _dotNetRef);
                _cameraInitialized = true;
                StateHasChanged();
            }
        }
    }

    [JSInvokable]
    public void OnMeasurementSave()
    {
        Preferences.Set("UserData", _btPayloadJson);
        _savedBtPayload = Preferences.Get("UserData", "(none)");
    }
    [JSInvokable]
    public void OnMeasurementSuccess()
    {
        NavigationManager.NavigateTo("/finish");
    }

    public async ValueTask DisposeAsync()
    {
        if (_dotNetRef != null)
        {
            _dotNetRef.Dispose();
        }

        await JS.InvokeVoidAsync("stopCamera");
    }

    private void GoToBluetooth()
    {
        NavigationManager.NavigateTo("/bluetooth");
    }
}

<style>
.center { display: block; text-align: center; }
.error  { color: red; }
[hidden] { display: none !important; }

main {
    display: flex;
    flex-direction: column;
    gap: 20px;
    overflow: auto;
}

#container {
    position: relative;
    width: 100%;
    height: 100%;
    flex-grow: 1;
    overflow: hidden;
    border-radius: 10px;
}

#notification {
    z-index: 10;
    position: absolute;
    top: 0;
    left: 0;
    padding: 10px;
    font-size: 30px;
    text-align: center;
    text-shadow: 
        -1px -1px 0 var(--clr-text-rev),
        1px -1px 0 var(--clr-text-rev),
        -1px  1px 0 var(--clr-text-rev),
        1px  1px 0 var(--clr-text-rev);
}

video, canvas {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    border-radius: 10px;
}

canvas {
    display: none;
}

#snapshotButton {
    position: absolute;
    bottom: 0;
    left: 0;
    z-index: 10;
    margin: 10px;
    width: calc(100% - 20px);
}

.modal {
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background-color: var(--clr-link);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
}

.modal-content {
    display: flex;
    flex-direction: column;
    gap: 20px;
    background: var(--clr-background);
    padding: 1.5rem;
    margin: 1rem;
    border-radius: 8px;
    width: 100%;
    max-width: 400px;
    text-align: center;
}

.modal-content ul {
    display: flex;
    flex-direction: column;
    text-align: left;
    gap: 2px;
    margin: 1em 0;
}
</style>