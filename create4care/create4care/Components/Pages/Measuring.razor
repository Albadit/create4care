@page "/measuring"

<NavMenu Name="Measuring" />

<main>
    <!-- <h1>Pose Measuring</h1> -->

    <span id="loading" class="center">Loading camera...</span>
    <span id="error" class="center error" hidden></span>
    <div id="container">
        <span id="notification" class="center" hidden></span>
        <video id="videoInput" muted autoplay playsinline></video>
        <canvas id="output"></canvas>
        <button id="snapshotButton" class="btn" hidden>Take Picture</button>
    </div>
    <div id="issuePopup" class="modal" hidden>
        <div class="modal-content">
            <h2>Issues Detected</h2>
            <ul id="issueList"></ul>
            <button id="retryButton" class="btn">Retry</button>
        </div>
    </div>
</main>

<script>
(() => {
    // ---- Cached DOM & State ----
    const $ = id => document.getElementById(id);
    const video      = $('videoInput');
    const canvas     = $('output');
    const loading    = $('loading');
    const errorMsg   = $('error');
    const notify     = $('notification');
    const btn        = $('snapshotButton');
    const popup      = $('issuePopup');
    const issueList  = $('issueList');
    const retryBtn   = $('retryButton');
    let capabilities = {};
    let videoDims    = { width: 1280, height: 720 };

    // ---- Generic POST helper ----
    async function postData(url, payload) {
        try {
            const res = await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            if (!res.ok) throw new Error(`HTTP ${res.status}`);
            return await res.json();
        } catch (err) {
            console.error(`Error POST ${url}:`, err);
            return null;
        }
    }

    // ---- Camera Setup ----
    async function setupCamera() {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({
                video: { facingMode: 'environment', width: 1280, height: 720 }
            });
            const track = stream.getVideoTracks()[0];
            const caps  = track.getCapabilities?.() || {};
            capabilities = caps;

            // Try max resolution
            if (caps.width?.max && caps.height?.max) {
                await track.applyConstraints({
                    width: caps.width.max,
                    height: caps.height.max
                });
                videoDims = { width: caps.width.max, height: caps.height.max };
            }

            video.srcObject = stream;
            await new Promise(r => video.onloadedmetadata = r);

            loading.hidden = true;
            adjustCanvas();
            btn.hidden = false;
        } catch (err) {
            console.error('Camera error:', err);
            loading.hidden = true;
            errorMsg.hidden = false;
            errorMsg.textContent = `Error accessing camera: ${err.message}`;
        }
    }

    // ---- Canvas Sizing ----
    function adjustCanvas() {
        const { width: vw, height: vh } = videoDims;
        const CW = container.clientWidth;
        const CH = container.clientHeight;
        const scale = Math.min(CW / vw, CH / vh);
        canvas.width  = vw;
        canvas.height = vh;
        [video, canvas].forEach(el => {
            el.style.width  = `${vw * scale}px`;
            el.style.height = `${vh * scale}px`;
        });
    }

    // ---- Snapshot Flow ----
    btn.addEventListener('click', async () => {
        if (!video.paused) {
        // Capture
        video.pause();
        btn.textContent = 'Processing...';
        notify.hidden = true;

        // Draw & encode
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0, videoDims.width, videoDims.height);
        const imageBase64 = canvas.toDataURL();

        // 1) Pose detection
        const pose = await postData(
            'https://api.blokk.duckdns.org/pose_detection/',
            { image_base64: imageBase64 }
        );
        if (!pose) {
            notify.textContent = 'Pose detection failed.';
            notify.hidden = false;
            return btn.textContent = 'Retry';
        }

        // 2) Show issues
        if (pose.issues?.length) {
            issueList.innerHTML = pose.issues.map(i => `<span>- ${i}</span>`).join('');
            popup.hidden = false;
            retryBtn.onclick = reset;
            return;
        }

        // 3) Save measurement
        if (pose.landmark_image) {
            const measurement = {
                patient_id: 1,
                measured_by_user_id: 1,
                height_mm: 1,
                weight_kg: 1,
                sleep_hours: 1,
                exercise_hours: 1,
                image: pose.landmark_image
            };
            const result = await postData(
                'https://api.blokk.duckdns.org/measurements/',
                measurement
            );
            notify.textContent = result
                ? 'Measurement saved!'
                : 'Failed to save measurement.';
        } else {
            notify.textContent = 'No landmark image returned.';
        }

        notify.hidden = false;
        btn.textContent = 'Retry';

        } else {
            reset();
        }
    });

    function reset() {
        popup.hidden = true;
        video.play();
        notify.hidden = true;
        btn.textContent = 'Take Picture';
    }

    // ---- (Optional) Handle resize ----
    // let resizeTimeout;
    // window.addEventListener('resize', () => {
    //   clearTimeout(resizeTimeout);
    //   resizeTimeout = setTimeout(adjustCanvas, 200);
    // });

    // ---- Init ----
    setupCamera();
})();
</script>

<style>
.center { display: block; text-align: center; }
.error  { color: red; }
[hidden] { display: none !important; }

main {
    display: flex;
    flex-direction: column;
    gap: 20px;
    overflow: auto;
}

#container {
    position: relative;
    width: 100%;
    height: 100%;
    flex-grow: 1;
    overflow: hidden;
    border-radius: 10px;
}

#notification {
    z-index: 10;
    position: absolute;
    top: 0;
    left: 0;
    padding: 10px;
    font-size: 30px;
    text-align: center;
    text-shadow: 
        -1px -1px 0 var(--clr-text-rev),
        1px -1px 0 var(--clr-text-rev),
        -1px  1px 0 var(--clr-text-rev),
        1px  1px 0 var(--clr-text-rev);
}

video, canvas {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    border-radius: 10px;
}

#snapshotButton {
    position: absolute;
    bottom: 0;
    left: 0;
    z-index: 10;
    margin: 10px;
    width: calc(100% - 20px);
}

.modal {
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background-color: var(--clr-link);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
}

.modal-content {
    background: var(--clr-background);
    padding: 1.5rem;
    border-radius: 8px;
    max-width: 90%;
    width: 300px;
    text-align: center;
}

.modal-content ul {
    display: flex;
    flex-direction: column;
    text-align: left;
    gap: 2px;
    margin: 1em 0;
}
</style>